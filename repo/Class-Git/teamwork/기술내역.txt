1. 개발 환경 구축 및 운영
   Node.js, Visual Studio Code 기반 리액트 개발 환경을 구축할 수 있다
   create-react-app 도구를 사용하여 리액트 프로젝트를 만들고 실행할 수 있다
   Zulu JDK, Oracle JDK 등을 설치하고 환경변수를 작성하여 자바 실행 환경을 구축할 수 있다
   Eclipse, Spring Tool Suite 등을 설치하여 자바 및 스프링 프레임워크 기반 개발 환경을 구축할 수 있다
   Eclipse, Spring Tool Suite에서 애플리케이션 특성에 맞는 프로젝트를 만들고 실행할 수 있다
   Apache Tomcat 웹 컨테이너를 설치하고 실행할 수 있다
   Apache Tomcat 웹 컨테이너에 웹 애플리케이션을 배포할 수 있다
   Eclipse, Spring Tool Suite 개발 환경에 Apache Tomcat 웹 컨테이너를 연동하여 실행할 수 있다
   Maven, Gradle 도구를 사용해서 자바 프로젝트 구성 및 빌드를 자동화 할 수 있다
   Lombok을 설치하고 생성자, getter, setter, toString 등 자바 클래스의 공통 요소 구현을 자동화 할 수 있다
   Miniconda, Visual Studio Code 기반 파이썬 개발 환경을 구축할 수 있다
   Visual Studio Code에 Jupyter Notebook 실행 환경을 만들고 활용할 수 있다
   Visual Studio Code에 파이썬 프로그램을 구현하고 실행할 수 있다
   Git을 설치하고 환경변수를 작성하여 형상 관리 환경을 구축할 수 있다
   Github에 개인 및 조직 기반 저장소를 만들고 공유할 수 있다
   Git 명령어를 사용하여 Github 저장소를 연동하여 소스코드를 push하거나 pull할 수 있다
   충돌이 발생한 경우 원인에 따라 충돌을 조정하고 처리할 수 있다

2. 데이터베이스 활용
   MySQL 데이터베이스 관리시스템을 설치하고 기본 설정을 수행할 수 있다
   MySQLWorkbench를 사용하여 데이터베이스에 연결하고 명령을 실행할 수 있다
   Oracle 데이터베이스 관리시스템을 설치하고 기본 설정을 수행할 수 있다
   SQLDeveloper를 사용하여 데이터베이스에 연결하고 명령을 실행할 수 있다
   MySQL, Oracle 데이터베이스에 사용자 계정을 만들고 권한을 부여할 수 있다
   표준 SQL을 활용하여 데이터베이스를 만들 수 있다
   표준 SQL을 활용하여 테이블과 테이블 사이의 관계를 만들 수 있다
   표준 SQL을 활용하여 테이블에 제약 조건을 작성할 수 있다
   표준 SQL을 활용하여 데이터 생성/수정/삭제 명령을 작성할 수 있다
   표준 SQL을 활용하여 단일 테이블 조회 및 Join을 사용한 다중 테이블 조회 명령을 작성할 수 있다
   eXERD를 활용하여 논리 및 물리 모델링을 수행하고 ER-Diagram을 만들 수 있다
   모델링을 통해 만들어진 ER-Diagram을 포워드 엔지니어링으로 데이터베이스에 적용할 수 있다
   JDBC를 사용하여 데이터베이스 연동 기능을 구현할 수 있다
   MyBatis를 활용하여 Mapper 설정 파일 기반의 데이터베이스 연동 기능을 구현할 수 있다
   MyBatis를 활용하여 Mapper 인터페이스 및 어노테이션 기반의 데이터베이스 연동 기능을 구현할 수 있다
   JPA를 활용하여 데이터베이스 연동 기능을 구현할 수 있다

3. 웹 표준 기술
   HTML, CSS를 활용하여 웹페이지를 개발할 수 있다
   Javascript를 활용하여 웹페이지에 사용자 이벤트 처리와 같은 동적 기능을 구현할 수 있다
   jQuery를 사용하여 브라우저간 호환 가능한 Javascript 코드를 작성할 수 있다
   Bootstrap의 구성 원리와 미리 만들어진 컴포넌트를 활용하여 웹페이지를 디자인하고 작성할 수 있다
   Ajax 기법을 사용하여 비동기 방식 요청을 전송하고 데이터를 수신하여 화면에 반영하는 기능을 구현할 수 있다
   
4. 프론트엔드 개발 기술
   리액트를 사용하여 컴포넌트를 개발하고 화면을 구현할 수 있다
   Property, State 등을 사용하여 리액트 컴포넌트간 데이터를 공유할 수 있다
   다양한 hook을 사용하여 컴포넌트 수명주기 이벤트를 처리할 수 있다
   리액트 페이지간 라우팅 시스템을 구축하고 페이지 이동간 데이터 전달을 수행할 수 있다
   axios 비동기 요청 처리 라이브러리를 사용하여 비동기 요청을 수행하고 수신된 데이터를 사용하여 화면을 갱신할 수 있다
   개발된 리액트 앱을 빌드하고 자바 기반 웹 애플리케이션에 포함하여 배포할 수 있다

5. 자바 개발 언어
   Java 객체지향 언어를 활용하여 요구사항에 따라 클래스와 인터페이스를 만들고 상속 및 구현을 적용할 수 있다
   Java 예외 처리 시스템을 사용하여 프로그램 실행 중 발생하는 예외를 관리할 수 있다
   Java IO 클래스를 사용하여 데이터 저장, 읽기, 전송, 수신 등의 기능을 구현할 수 있다
   Java Collections 클래스를 활용하여 다수의 데이터를 효과적으로 제어하는 자료구조와 알고리즘 기능을 상황에 맞게 활용할 수 있다
   Thread 관련 클래스를 사용하여 비동기 실행 구조를 구현할 수 있고 Thread간 공유 데이터를 제어할 수 있다
   Network 관련 클래스를 사용하여 두 개 이상의 프로그램을 연결하고 데이터 전송 및 수신 기능을 구현할 수 있다

6. 오류 처리
   오류 발생시 오류 메시지를 분석하고 원인을 파악할 수 있다
   오류 원인에 따라 다양한 참고 자료를 활용하여 오류를 수정할 수 있다
   Eclipse, Browser 등 도구가 제공하는 디버깅 도구를 사용하여 실행을 제어하고 문제 원인을 파악할 수 있다

7. Java 웹 개발    
   웹 컨테이너와 Java 웹 애플리케이션의 실행 원리를 이해하고 Java 웹 애플리케이션을 컨테이너에 배포하고 실행할 수 있다
   웹 애플리케이션의 구조를 이해하고 웹 프로젝트를 만들 수 있다
   web.xml 파일을 사용하여 웹 애플리케이션의 실행 관련 설정을 작성할 수 있다
   Servlet 클래스를 작성하고 doGet, doPost 등의 인터페이스 메서드에서 요청을 수신하고 처리 및 응답하는 코드를 구현할 수 있다
   doGet, doPost 등의 요청 처리 메서드에서 요청 데이터를 읽고 사용할 수 있다
   JSP 문법 체계를 이해하고 expression, scriptlet 등의 문법을 활용하여 동적 실행되는 JSP 페이지를 구현할 수 있다
   expression, scriptlet을 대체하는 EL, JSTL을 활용하여 동적 실행되는 JSP 페이지를 구현할 수 있다
   페이지 이동에서 forward와 redirect의 차이를 이해하고 상황에 따라 forward와 redirect를 적용하여 구현할 수 있다
   Servlet과 JSP를 사용하여 요청 처리와 응답 컨텐츠 생산 기능을 분담하는 Model 2 방식의 웹 애플리케이션을 구현할 수 있다
   Cookie, Session 등을 활용하여 웹 애플리케이션의 상태를 저장하고 읽어서 사용할 수 있다
   상태 관리 기법을 활용하여 로그인, 로그아웃 등 사용자 인증 기능을 구현할 수 있다
   브라우저에서 파일을 전송하고 서버에서 파일을 읽고 저장하는 파일 업로드 기능을 구현할 수 있다
   클라이언트에게 파일을 전송하는 파일 다운로드 기능을 구현할 수 있다
   Filter를 사용하여 다수의 요청에 공통적인 기능을 중앙 집중적으로 처리하는 클래스를 작성하고 적용할 수 있다
   애플리케이션 실행 중 발생하는 세션 및 애플리케이션 수명주기 관련 이벤트를 수신하고 처리할 수 있다
   웹 애플리케이션을 UI Layer, Business Logic Layer, Data Access Layer로 나누어서 구현할 수 있다
   웹 애플리케이션을 모델-뷰-컨트롤러로 분리하는 MVC 패턴에 따라 구현할 수 있다
   
8. 스프링 프레임워크 기초
   설정 파일 또는 설정 클래스를 사용해서 IoC 컨테이너에 객체를 등록할 수 있다.
   설정 파일 또는 설정 클래스를 사용해서 세터 주입 또는 생성자 주입 방식으로 객체 사이의 의존성을 설정할 수 있다.
   어노테이션을 사용해서 IoC 컨테이너에 객체를 등록하고 의존성을 설정할 수 있다.
   Advice 클래스를 만들고 설정 파일 또는 설정 클래스를 사용해서 Advice, Aspect, Pointcut을 설정할 수 있다
   bean, within, execution 표현식 문법을 사용해서 Pointcut을 작성할 수 있다

9. 스프링 웹 MVC 활용

   Legacy 방식의 스프링 웹 MVC 프로젝트를 만들 수 있다
   Spring Boot 방식의 스프링 웹 MVC 프로젝트를 만들 수 있다
   Maven 또는 Gradle 설정에서 필요한 의존 라이브러리를 등록할 수 있다
   설정 파일 또는 설정 클래스 및 어노테이션을 사용해서 스프링 웹 MVC 설정을 적용하고 객체간의 의존성을 설정할 수 있다
   클라이언트의 요청 수신, 요청 데이터 읽기, 서비스 및 뷰와의 연동을 처리하는 컨트롤러를 구현할 수 있다
   컨트롤러에서 처리된 데이터를 뷰로 전달할 수 있다
   @ResponseBody 어노테이션을 사용해서 Ajax와 같은 비동기 요청을 처리하고 응답하는 컨트롤러를 구현할 수 있다
   JSP 뷰템플릿을 사용해서 뷰 로직을 구현할 수 있다
   Thymeleaf 뷰템플릿을 사용해서 뷰 로직을 구현할 수 있다
   뷰템플릿에서 컨트롤러로부터 전달된 데이터를 읽고 응답 컨텐츠에 적용할 수 있다
   파일 다운로드 등을 처리하는 사용자 정의 뷰를 만들고 사용할 수 있다
   스프링 트랜잭션 템플릿을 사용하여 두 개 이상의 물리적인 데이터 처리를 하나의 논리적인 작업으로 처리하는 트랜잭션을 적용할 수 있다
   Interceptor를 사용하여 인증, 로깅과 같은 여러 컨트롤러에 필요한 공통 기능을 하나의 클래스로 구현하고 적용할 수 있다
   MultipartResolver 빈을 적용하고 파일 업로드 기능을 구현할 수 있다
   Spring Security 프레임워크를 사용해서 사용자 인증 시스템을 구현할 수 있다
   
10. OpenAPI 활용
    XML, JSON 데이터 포맷에 따라 데이터를 읽고 작성할 수 있다
    네이버, 구글 등의 OpenAPI 서비스를 분석하고 명세를 적용하여 다양한 외부의 데이터와 기능을 웹 애플리케이션과 연동할 수 있다
    서울시 열린 데이터 광장, 공공 데이터 포털 등에서 제공하는 OpenAPI 서비스를 분석하고 명세를 적용하여 웹 애플리케이션에서 다양한 데이터를 활용할 수 있다
    웹 크롤링 기법을 활용하여 웹 페이지에서 필요한 데이터를 수집하고 활용할 수 있다

11. Python 웹 프로그래밍

    Python 언어를 활용하여 요구사항에 따라 패키지, 모듈, 클래스, 함수를 만들고 기능을 구현할 수 있다
    Flask 웹 프레임워크 기반의 웹 프로젝트를 만들고 구성할 수 있다
    웹 요청 수신, 데이터 읽기, 처리, 템플릿 연동 등을 처리하는 뷰 모듈을 구현할 수 있다
    웹 요청과 view 모듈을 연결하는 라우팅 시스템을 구축할 수 있다
    블루프린트를 활용하여 여러 개의 뷰 모듈을 연동하여 구현할 수 있다
    html 템플릿을 사용해서 요청 수신 모듈에서 전달된 데이터를 기반으로 응답 컨텐츠를 생산할 수 있다
    pymysql 모듈을 사용해서 데이터베이스와 연동하는 기능을 구현할 수 있다
    파일 업로드 및 다운로드 기능을 구현할 수 있다

12. OCR 라이브러리 활용

    OpenCV 라이브러리를 활용하여 이미지 파일을 읽기, 전처리, 저장 등의 기능을 구현할 수 있다
    OpenCV 라이브러리를 활용하여 카메라로부터 사진을 캡처해서 처리하고 저장 하는 기능을 구현할 수 있다
    tesseract, easyocr 등의 라이브러리를 사용하여 이미지에서 텍스트 데이터를 검출하는 기능을 구현할 수 있다.